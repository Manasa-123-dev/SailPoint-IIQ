<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Assessment Workflow Aggregate All Accounts" type="Workflow">
  <Description>A rule used by a Workflow to determine a step action or variable value.

Note that an Attributes map of all variables from the current WorkflowContext, merged with the arguments from the Step, is also passed into the workflow rule.</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="wfcontext">
        <Description>
          The current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="handler">
        <Description>
          The workflow handler associated with the current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="workflow">
        <Description>
          The current Workflow definition.
        </Description>
      </Argument>
      <Argument name="step">
        <Description>
          The current Step.
        </Description>
      </Argument>
      <Argument name="approval">
        <Description>
          The current Approval.
        </Description>
      </Argument>
      <Argument name="item">
        <Description>
          The WorkItem being processed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="Object">
        <Description>
          The result of the workflow rule; dependent on the rule itself.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>import sailpoint.object.Application;
import sailpoint.object.Attributes;
import sailpoint.object.Custom;
import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.Link;
import sailpoint.object.QueryOptions;
import sailpoint.object.ResourceObject;
import sailpoint.object.TaskResult;
import sailpoint.object.Rule;
import sailpoint.connector.JDBCConnector;
import sailpoint.api.Aggregator;
import sailpoint.connector.Connector;
import java.util.List;
import java.util.ArrayList;
import org.apache.log4j.Logger;
import org.apache.log4j.Level;

// Declare a logger class for us to isolate these messages during aggregation.
Logger log = Logger.getLogger("sailpoint.services.singleAccountAggregation");
log.setLevel(Level.DEBUG);

// Initialize the error message and output map to nothing.
String errorMessage = "";
Map outputStatus = new HashMap();

// We need some values defined to know which account we want to aggregate.

String identityName = identityName;
Identity identity = context.getObjectByName(Identity.class, identityName);

List links = identity.getLinks();
List applicationNames = new ArrayList();

for (Link link : links) {
	if(!link.getApplication().isAuthoritative())
		applicationNames.add(link.getApplicationName());
}

for (String applicationName : applicationNames) {
	
	Application appObject = context.getObjectByName(Application.class, applicationName);
	String accountName = identity.getLink(appObject).getNativeIdentity();
	
	String appConnName = appObject.getConnector();
	log.debug("Application " + applicationName + " uses connector " + appConnName);
	
	if(appConnName.equals("sailpoint.connector.webservices.WebServicesConnector")) {
		errorMessage = "For connector " + appConnName + ", run aggregate task manually";
		log.debug(errorMessage);
		outputStatus.put(applicationName,errorMessage);
		continue;
	}
	
	Connector appConnector = sailpoint.connector.ConnectorFactory.getConnector(appObject, null);
	if (appConnector == null) {
		errorMessage = "Failed to construct an instance of connector [" + appConnName + "]";
		outputStatus.put(applicationName, errorMessage);
		continue;
	}
	
	log.debug("Connector instantiated, calling getObject() to read account details...");
	
	ResourceObject rObj = null;
	try {
		rObj = (ResourceObject) appConnector.getObject("account", accountName, null);
	} catch (sailpoint.connector.ObjectNotFoundException onfe) {
		errorMessage = "Connector could not find account: [" + accountName + "] in application  [" + applicationName + "]";
		log.error(errorMessage);
		log.error(onfe);  
		outputStatus.put(applicationName, errorMessage);
		continue;
	}
	
	if (null == rObj) {
		errorMessage = "ERROR: Could not get ResourceObject for account: " + accountName;
		log.error(errorMessage);
		outputStatus.put(applicationName, errorMessage);
		continue;
	}
	
	log.debug("Got raw resourceObject");//\n" + rObj.toXml());
	
	// Now we have a raw ResourceObject.  The Application in IdentityIQ may have a
	// Customization rule defined to transform the ResourceObject.  We need to
	// honor that configuration, so if the Applicaiton has a Rule then we run it.
	Rule customizationRule = appObject.getCustomizationRule();
	if (null != customizationRule) {
		log.debug("Customization rule found for applicaiton " + applicationName);  
		try {
			// Pass the mandatory arguments to the Customization rule for the app.
			HashMap ruleArgs = new HashMap();
			ruleArgs.put("context",     context);
			ruleArgs.put("log",         log);
			ruleArgs.put("object",      rObj);
			ruleArgs.put("application", appObject);
			ruleArgs.put("connector",   appConnector);
			ruleArgs.put("state",       new HashMap());
			
			// Call the customization rule just like a normal aggregation would.
			ResourceObject newRObj = context.runRule(customizationRule, ruleArgs, null);
			
			// Make sure we got a valid resourceObject back from the rule. 
			if (null != newRObj) {
				rObj = newRObj;
				log.debug("Got post-customization resourceObject");//\n" + rObj.toXml());
			}   
			
		} catch (Exception ex) {
			// Swallow any customization rule errors, the show must go on!
			log.error("Error while running Customization rule for " + applicationName);
		}
	}
	
	// Next we perform a miniature "Aggregation" using IIQ's built in Aggregator.
	// Create an arguments map for the aggregation task.
	// To change this (if you need to), the map contains aggregation options and is the same as the
	// arguments to the acocunt aggregation tasks.  Some suggestied defaults are:
	Attributes argMap = new Attributes();
	argMap.put("promoteAttributes",       "true");
	argMap.put("correlateEntitlements",   "true");
	argMap.put("noOptimizeReaggregation", "true");  // Note: Set to false to disable re-correlation.
	
	// Consturct an aggregator instance.
	Aggregator agg = new Aggregator(context, argMap);
	if (null == agg) {
		errorMessage = "Null Aggregator returned from constructor.  Unable to Aggregate!";
		log.error(errorMessage);
		outputStatus.put(applicationName, errorMessage);
		continue;
	}
 
	// Invoke the aggregation task by calling the aggregate() method.
	// Note: the aggregate() call may take serveral seconds to complete.
	log.debug("Calling aggregate() method... ");
	TaskResult taskResult = agg.aggregate(appObject, rObj);
	log.debug("aggregation complete");
	
	if (null == taskResult) {
		errorMessage = "ERROR: Null taskResult returned from aggregate() call.";
		log.error(errorMessage);
		outputStatus.put(applicationName, errorMessage);
		continue;
	}

	log.debug("TaskResult details\n" + taskResult.toXml());
	outputStatus.put(applicationName, "Success");

}

log.debug("Aggregations made with their status:\n" + outputStatus);
return outputStatus;
  </Source>
</Rule>