<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule created="1702285500616" id="0a0014178c5714c8818c581f60c8007b" language="beanshell" modified="1703610641871" name="Example Approval Assignment Rule" significantModified="1703610641871" type="ApprovalAssignment">
  <Description>
    This example rule switches all of the owners to spadmin.  The idea 
    of this rule is to allow some customization of the approvals 
    so the ownership can be cacluated for cases where you might
    use and exteneded attribute or some other means outside our
    default mechanisms to derive the owner of the Approval.

    This rule is typically configured on the Approval Step
    in the LCM Provisioning Workflow or can be set on any
    steps based on the "Provisioning Approval" step 
    library.

    Since 6.2
  </Description>
  <Signature>
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="approvals">
        <Description>
          List of approvals generated by the approvalScheme, maybe null if there were no
          approvals enabled.
        </Description>
      </Argument>
      <Argument name="approvalSet">
        <Description>
          Representation of the cart, also found on the approvals generated by the 
          default schemes.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="newApprovals">
        <Description>

        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
  import sailpoint.object.Workflow;

  import sailpoint.object.Identity;

  import sailpoint.object.Workflow.Approval;

  import java.util.List;

  import java.util.ArrayList;


  System.out.println("entered into approval rule:");
  List newApprovals = null;

  if(approvals !=null){

    newApprovals = new ArrayList();

    for(Approval approval: approvals){

      if( approval  !=null){
        System.out.println("ApprovalName:="+approval.getName());
        newApprovals.add(approval);

      }

    }

    Approval secondApprover =new Approval();


    Identity identity = context.getObjectByName(Identity.class, identityName);


    String department=identity.getAttribute("departmentDirector");

    Identity identityobj = context.getObjectByName(Identity.class,department);

    String name = identityobj.getName();

    secondApprover.setOwner(name);

    newApprovals.add(secondApprover);

  }


  return newApprovals;
  </Source>
</Rule>
