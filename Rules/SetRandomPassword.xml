<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule created="1703230829807" id="0a0014308c901b10818c9077f4ef069d" language="beanshell" modified="1704707227377" name="Set Password_Random" significantModified="1704707227377" type="IdentityCreation">
  <Description>Identity creation rules are used to set attributes on new Identity objects when they are created.This rules sets random password  New identities may be created during the aggregation of application accounts, or optionally created after pass-through authentication.

    One common operation is to change the name property of the identity when the default application name is complex (such as a directory DN).

    Another common operation is to assign a set of initial capabilities based on the attributes pulled from the application account.</Description>
  <Signature returnType="void">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="environment" type="Map">
        <Description>
          Arguments passed to the aggregation task.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          Application being aggregated.
        </Description>
      </Argument>
      <Argument name="account" type="ResourceObject">
        <Description>
          The resource account for the identity being created.
        </Description>
      </Argument>
      <Argument name="identity" type="Identity">
        <Description>
          The identity that is being created.
        </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source>import sailpoint.object.Identity;
  import java.util.Random;
  import java.util.*;

  if (identity != null) {
    int length = 12; 
    StringBuilder password = new StringBuilder(length);

    String lowercase = "abcdefghijklmnopqrstuvwxyz";
    String uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    String digits = "0123456789";
    String specialCharacters = "!@#$%^&amp;*()-_+=&lt;>?";

    String alias=lowercase+uppercase+digits+specialCharacters;
    Random random = new Random();
    password.append(uppercase.charAt(random.nextInt(uppercase.length())));
    password.append(lowercase.charAt(random.nextInt(lowercase.length())));
    password.append(lowercase.charAt(random.nextInt(lowercase.length())));
    password.append(lowercase.charAt(random.nextInt(lowercase.length())));
    password.append(digits.charAt(random.nextInt(digits.length())));
    password.append(specialCharacters.charAt(random.nextInt(specialCharacters.length())));

    for (int i = 6; i &lt; length; i++) {
      password.append(alias.charAt(random.nextInt(alias.length())));
    }
    String newPassword = password.toString();                    
    identity.setPassword(newPassword);

  }</Source>
</Rule>
